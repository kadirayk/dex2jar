description = 'Dex Tools'
apply plugin:'application'

mainClassName="com.googlecode.dex2jar.tools.BaseCmd"

dependencies {
  compile project(':dex-translator')
  compile project(':d2j-smali')
  compile project(':d2j-jasmin')
  compile project(':dex-writer')
  compile project(':d2j-base-cmd')
}

// to build a runnable jar with dependencies. jar will be created under dex-tools/build/libs
task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.googlecode.dex2jar.tools.Dex2jarCmd'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task bin_gen(type: JavaExec) {
    dependsOn jar
    classpath sourceSets.main.runtimeClasspath
    ext.binDir="$buildDir/generated-sources/bin"
    outputs.dir file(ext.binDir)
    main='com.googlecode.dex2jar.bin_gen.BinGen'
    args=["$projectDir/src/main/bin_gen","$ext.binDir"]
}
applicationDistribution.from(bin_gen)
//applicationDistribution.from('src/main/jars') {
//  into("lib")
//}
applicationDistribution.from('open-source-license.txt') {
  into("lib")
}
applicationDistribution.from("$parent.rootDir") {
  include("NOTICE.txt")
  include("LICENSE.txt")
}

startScripts.dependsOn bin_gen

artifacts.archives distZip

